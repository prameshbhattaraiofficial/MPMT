@using Mpmt.Web.Areas.Admin.ViewModels.Agent;

@model AddApiKeysAgent

<form id="formAddApikeyPatner" method="post" autocomplete="off" class="text-center">
    <ul>
        @if (ViewBag.Error is not null)
        {
            <li class="text-danger">@ViewBag.Error</li>
        }
    </ul>

    <div class="row">
        <input type="text" id="Agentcode" asp-for="AgentCode" value="@Model.AgentCode" style="display:none" readonly>

        <div class="col-md-4 mb-2">
            <label class="form-label">ApiUserName</label>
            <div class="input-group">
                <input type="text" asp-for="ApiUserName" onblur="ValidateFunction()" class="form-control" placeholder="Eg. ApiUserName">
            </div>
            <span asp-validation-for="ApiUserName" id="api-username-error" class="text-danger"></span>
        </div>

        <div id="Ipaddress" class="col-md-4 mb-2">
            <label class="form-label">IPAddress</label>
            <div class="input-group">
                <input type="text" asp-for="IPAddress[0]" onblur="ValidateFunction()" class="form-control" placeholder="Eg. 123.123.1.123">
                <button type="button" class="btn btn-outline-danger" onclick="removeIPAddress(this)">-</button>
            </div>

            <div id="slabs" class="col-md-12">
                <!-- New slabs will be added here -->
            </div>
        </div>

        <div class="col-md-4">
            <button type="button" class="btn btn-primary" data-toggle="tooltip" title="Add IP Address" onclick=" addIPAddress()">+Add</button>
        </div>

    </div>

    <div class="row">


        <div class="col-md-4">
            <input asp-for="IsActive" class="form-check-input" name="IsActive" type="checkbox" id="flexCheckDefault">
            <label class="form-check-label" for="flexCheckDefault">
                IsActive
            </label>
            <span asp-validation-for="IPAddress" class="text-danger"></span>
        </div>

        <div class="col-md-4">
            <div class="input-group mt-2">
                <button onclick="CreateFormData()" type="button" class="btn btn-sm btn-primary">Create ApiKeys</button>
            </div>

        </div>



    </div>
</form>

<script>

    function CreateFormData() {
        debugger;
        const formData = {
            AgentCode: document.getElementById("Agentcode").value,
            //CredentialId: document.getElementById("CredentialId").value,/* document.querySelector('[name="CredentialId"]').value, */
            ApiUserName: document.querySelector('[name="ApiUserName"]').value,
            IsActive: document.querySelector('[name="IsActive"]').checked,
            IPAddress: Array.from(document.querySelectorAll('[name^="IPAddress"]')).map(input => input.value)
        };

        if (!ValidateFunction() && !ValidateUsername()) {
            return false;
        }
        $.ajax({
            type: 'POST',
            url: '@Url.Action("AddApiKey", "SuperAgent")', // Ensure this translates correctly or replace with static URL
            // contentType: 'application/json; charset=utf-8', // Corrected content type for JSON
            data: formData, // Stringify formData to send as JSON
            success: function (response) {
                console.log(response);
                $("#add-new .modal-body").html("");
                $("#add-new .modal-title").html("");
                $("#add-new").modal('hide');
                Pagination.getData();
            },
            error: function () {
                alert('Failed to update IP Address.');
            }
        });
    }


    // FormHandler.init({
    //     method: 'POST',
    //     actionUrl: '@Url.Action("AddApiKey", "SuperAgent")',
    //     containerSelector: '#add-new .modal-body',
    //     selector: '#formAddApikeyPatner'
    // }, function () {
    //     $("#add-new .modal-body").html("");
    //     $("#add-new .modal-title").html("");
    //     $("#add-new").modal('hide');

    //     Pagination.getData();
    // });

    let IpAddressIndex = 1;
    function addIPAddress() {
        const ipAddresses = document.getElementById("Ipaddress");
        const newInputGroup = document.createElement("div");
        newInputGroup.classList.add("input-group", "mb-2");

        newInputGroup.innerHTML = `
                            <input type="text" name="IPAddress[${IpAddressIndex}]" class="form-control" placeholder="Eg. 123.123.1.123">
                        <button type="button" class="btn btn-outline-danger" onclick="removeIPAddress(this)">-</button>
                    `;

        ipAddresses.appendChild(newInputGroup);
        IpAddressIndex++;
        updateRemoveButtons();
    }

    function removeIPAddress(btn) {
        btn.parentNode.remove();
        updateRemoveButtons();
    }


    function ValidateFunction() {
        ValidateUsername();
        var isValid = true;
        var ipAddresses = [];

        $('input[name^="IPAddress"]').each(function () {
            var $input = $(this);
            var ip = $input.val().trim();
            var $closestDiv = $input.closest('div');
            var $errorSpan = $closestDiv.next("span");

            // Clear previous error messages
            $closestDiv.next("span").remove();

            if (!ip) {
                var $newSpan = $("<span class='text-danger'>Please Enter the IP Address</span>");
                if ($errorSpan.length === 0) {
                    $closestDiv.after($newSpan);
                }
                isValid = false;
            } else if (!validateIPAddress(ip)) {
                var $Ipspan = $("<span class='text-danger'>Please Enter a Valid IP Address</span>");
                if ($errorSpan.length === 0) {
                    $closestDiv.after($Ipspan);
                }
                isValid = false;
            } else if (ipAddresses.includes(ip)) {
                var $duplicateSpan = $("<span class='text-danger'>Duplicate IP Address</span>");
                if ($errorSpan.length === 0) {
                    $closestDiv.after($duplicateSpan);
                }
                isValid = false;
            } else {
                ipAddresses.push(ip);
            }
        });

        return isValid;
    }

    // function validateIPAddress(ip) {
    //     const ipRegex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
    //     return ipRegex.test(ip);
    // }

    // function ValidateUsername() {
    //     var isValid = true;
    //     var apiUserNameInput = document.querySelector('[name="ApiUserName"]');
    //     var apiUserNameValue = apiUserNameInput.value.trim();
    //     var errorMessageSpan = document.getElementById('api-username-error');

    //     // Clear previous error messages
    //     errorMessageSpan.textContent = '';

    //     // Check if the input is empty
    //     if (apiUserNameValue === "") {
    //         errorMessageSpan.textContent = "Please Enter the Api Username*";
    //         isValid = false;
    //     }

    //     return isValid;
    // // }


    // function ValidateFunction() {
    //     var isValid = false;
    //     $('input[name^="IPAddress"]').each(function () {
    //         var $input = $(this);
    //         var ip = $input.val();
    //         console.log(ip);
    //         var $closestDiv = $input.closest('div');
    //         var $closestDivId = $input.closest('div').attr('id');

    //         var $errorSpan = $closestDiv.next("span")
    //         var $newSpan = $("<span class='text-danger'>Please Enter the IP Address</span>");
    //         var $Ipspan = $("<span class='text-danger'>Please Enter the Valid IP Address </span>")
    //         Check if the input field has a value (i.e., an image has been selected)

    //         if (!$input.val()) {
    //             if ($errorSpan.length === 0) {
    //                 $input.next("span").remove();
    //                 $closestDiv.after($newSpan);
    //             }
    //             isValid = false;
    //         } else if (!validateIPAddress(ip)) {
    //             if ($errorSpan.length === 0) {
    //                 $input.next("span").remove();
    //                 $closestDiv.after($Ipspan);
    //             }
    //             isValid = false;
    //         }
    //         else {
    //             $closestDiv.next("span").remove();
    //             isValid = true;
    //         }
    //     });
    //     return isValid;
    // }

    function validateIPAddress(ip) {
        const ipRegex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
        return ipRegex.test(ip);
    }

    function ValidateUsername() {
        var isValid = true;

        var apiUserNameInput = document.querySelector('[name="ApiUserName"]');
        var apiUserNameValue = apiUserNameInput.value.trim();
        var errorMessageSpan = document.getElementById('api-username-error');
        // Clear previous error messages
        errorMessageSpan.textContent = '';

        // Check if the input is empty
        if (apiUserNameValue === "") {
            errorMessageSpan.textContent = "Please Enter the Api Username*";
            isValid = false;

        }
        return isValid;
    }

    $(document).ready(function () {
        updateRemoveButtons();
    });

    document.addEventListener('DOMContentLoaded', function () {
        updateRemoveButtons();
    });

    function updateRemoveButtons() {
        const ipInputs = document.querySelectorAll('[name^="IPAddress"]');
        ipInputs.forEach((input) => {
            const button = input.closest('.input-group').querySelector('button');
            button.disabled = (ipInputs.length === 1);
            if (ipInputs.length === 1) {
                new PNotify({
                    title: 'Error notice',
                    text: 'Minimum one Ip Address is required',
                    type: 'error',
                    animation: {
                        effect_in: 'fade',
                        effect_out: 'slide'
                    }

                });
            }
        });
    }

</script>