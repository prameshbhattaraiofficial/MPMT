@using Mpmt.Core.Dtos.Agent
@model AgentCredentialUpdateRequest

@{
    var i = 0;
}
<form id="formUpdateApikeyPatner" method="post" autocomplete="off" class="text-center">
    <ul>
        @if (ViewBag.Error is not null)
        {
            <li class="text-danger">@ViewBag.Error</li>
        }
    </ul>

    <div class="row">
        <input id="Agentcode" type="text" asp-for="AgentCode" value="@Model.AgentCode" style="display:none" readonly>
        <input id="CredentialId" type="text" asp-for="CredentialId" value="@Model.CredentialId" style="display:none" readonly>

        <div class="col-md-4 mb-2">
            <label class="form-label">ApiUserName</label>
            <div class="input-group">
                <input type="text" id="ApiUsername" asp-for="ApiUserName"  class="form-control" placeholder="Eg. ApiUserName" readonly>
            </div>
            <span asp-validation-for="ApiUserName" class="text-danger"></span>
        </div>

        <div id="Ipaddress" class="col-md-4 mb-2">
            <label class="form-label">IPAddress</label>
            <div class="input-group">
                @foreach (var ip in Model.IPAddress)
                {
                    <div class="input-group mb-2" id="@i">

                        <input type="text" asp-for="IPAddress[i]" onblur=" ValidateFunction()" class="form-control" name="IPAddress[@i]" value="@ip">
                        <button type="button" class="btn btn-outline-danger" onclick="removeIPAddress(this)">-</button>
                    </div>
                    i++;
                }
            </div>
        </div>

        <div class="col-md-4">
            <button type="button" data-toggle="tooltip" title="Add IP Address" class="btn btn-outline-secondary" onclick="addIPAddress()">+</button>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4 mb-2">
            <input asp-for="IsActive" class="form-check-input" type="checkbox" id="flexCheckDefault" name="flexCheckDefault">
            <label class="form-check-label" for="flexCheckDefault">
                IsActive
            </label>

        </div>

        <div class="col-md-4 mb-2">
            <label class="form-label"></label>
            <div class="input-group">
                <button onclick="sendFormData()" type="button" class="btn btn-sm btn-primary">Update IP</button>
            </div>

        </div>

    </div>
</form>

<script>


    function updateRemoveButtons() {
        const ipInputs = document.querySelectorAll('[name^="IPAddress"]');
        ipInputs.forEach((input) => {
            const button = input.closest('.input-group').querySelector('button');
            button.disabled = (ipInputs.length === 1);
            if (ipInputs.length === 1) {
                new PNotify({
                    title: 'Error notice',
                    text: 'Minimum one Ip Address is required',
                    type: 'error',
                    animation: {
                        effect_in: 'fade',
                        effect_out: 'slide'
                    }

                });
            }
        });
    }

    function sendFormData() {
        debugger;
        const formData = {
            AgentCode: document.getElementById("Agentcode").value,
            ApiUserName: document.getElementById("ApiUsername").value,
            CredentialId: document.getElementById("CredentialId").value,/* document.querySelector('[name="CredentialId"]').value, */
            // ApiUserName: document.querySelector('[name ^= "IPAddress"]').value,
            IsActive: document.querySelector('[name="flexCheckDefault"]').checked,
            IPAddress: Array.from(document.querySelectorAll('[name^="IPAddress"]')).map(input => input.value)
        };

        if (!ValidateFunction()) {
            return false;
        }
        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateIpAddress", "SuperAgent")', // Ensure this translates correctly or replace with static URL
            // contentType: 'application/json; charset=utf-8', // Corrected content type for JSON
            data: formData, // Stringify formData to send as JSON
            success: function (response) {
                console.log("success", response);
                $("#add-new .modal-body").html("");
                $("#add-new .modal-title").html("");
                $("#add-new").modal('hide');
                Pagination.getData();
            },
            error: function () {
                debugger;
                alert('Failed to update IP Address.');
            }
        });
    }


    // $(document).ready(function () {
    //     $('#formupdateApikeyPatner').on('click', function (e) {
    //         if (!ValidateFunction()) {
    //             e.preventDefault();  // Stop form submission if validation fails
    //         }
    //     });
    // });

    let IpAddressIndex = @i;

    function addIPAddress() {
        const ipAddresses = document.getElementById("Ipaddress").querySelector('.input-group');
        const newInputGroup = document.createElement("div");
        newInputGroup.classList.add("input-group", "mb-2");
        newInputGroup.id = IpAddressIndex;
        newInputGroup.innerHTML = `
                                    <input type="text" name="IPAddress[${IpAddressIndex}]" class="form-control" placeholder="Eg. 123.123.1.123">
                                    <button type="button" class="btn btn-outline-danger" onclick="removeIPAddress(this)">-</button>
                                    `;
        ipAddresses.appendChild(newInputGroup);
        //addSlabInput(IpAddressIndex);
        IpAddressIndex++;
        updateRemoveButtons();
    }

    function removeIPAddress(btn) {
        btn.parentNode.remove();
        updateRemoveButtons();
    }



    function validateIPAddress(ip) {
        const ipRegex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
        return ipRegex.test(ip);
    }

    function ValidateFunction() {
        var isValid = true;
        var ipAddresses = [];

        $('input[name^="IPAddress"]').each(function () {
            var $input = $(this);
            var ip = $input.val().trim();
            var $closestDiv = $input.closest('div');
            var $errorSpan = $closestDiv.next("span");

            // Clear previous error messages
            $closestDiv.next("span").remove();

            if (!ip) {
                var $newSpan = $("<span class='text-danger'>Please Enter the IP Address</span>");
                if ($errorSpan.length === 0) {
                    $closestDiv.after($newSpan);
                }
                isValid = false;
            } else if (!validateIPAddress(ip)) {
                var $Ipspan = $("<span class='text-danger'>Please Enter a Valid IP Address</span>");
                if ($errorSpan.length === 0) {
                    $closestDiv.after($Ipspan);
                }
                isValid = false;
            } else if (ipAddresses.includes(ip)) {
                var $duplicateSpan = $("<span class='text-danger'>Duplicate IP Address</span>");
                if ($errorSpan.length === 0) {
                    $closestDiv.after($duplicateSpan);
                }
                isValid = false;
            } else {
                ipAddresses.push(ip);
            }
        });

        return isValid;
    }

    document.addEventListener('DOMContentLoaded', function () {
        debugger;
        updateRemoveButtons();
    });

    $(document).ready(function () {
        updateRemoveButtons();
    });

   

    // function ValidateFunction() {
    //     var isValid = false;
    //     $('input[name^="IPAddress"]').each(function () {
    //         var $input = $(this);
    //         var ip = $input.val();
    //         console.log(ip);
    //         var $closestDiv = $input.closest('div');
    //         var $closestDivId = $input.closest('div').attr('id');

    //         var $errorSpan = $closestDiv.next("span")
    //         var $newSpan = $("<span class='text-danger'>Please Enter the IP Address</span>");
    //         var $Ipspan = $("<span class='text-danger'>Please Enter the Valid IP Address </span>")
    //         // Check if the input field has a value (i.e., an image has been selected)

    //         if (!$input.val()) {
    //             if ($errorSpan.length === 0) {
    //                 $input.next("span").remove();
    //                 $closestDiv.after($newSpan);
    //             }
    //             isValid = false;
    //         } else if (!validateIPAddress(ip)) {
    //             if ($errorSpan.length === 0) {
    //                 $input.next("span").remove();
    //                 $closestDiv.after($Ipspan);
    //             }
    //             isValid = false;
    //         }
    //         else {
    //             $closestDiv.next("span").remove();
    //             isValid = true;
    //         }
    //     });
    //     return isValid;
    // }
</script>